// EJEMPLOS SOBRE FUNCIONES

// 1) Funciones sin par√°metros
// devolver un saludo
function getGreeting(){
    console.log("HOLA MUNDO! üåé");
};

// mando a llamar a la funci√≥n 
// para que ejecute el c√≥digo que est√° dentro de las llaves
getGreeting();

// 2) Funciones con par√°metros
// realizar una suma 
function getSuma(num1,num2){
    return num1 + num2; // devuelvo un valor de salida: 4
};
// devuelvo un mensaje en la consola con el
//  valor de salida de la funci√≥n
console.log("La suma es: " + getSuma(2,2));


// 3) Funci√≥n con parametros y donde javascript aplica el hoisting
// FUNCI√ìN CON PAR√ÅMETROS
function getSum(x, y) {
    console.log(`La suma es: ${x + y}`);
    alert(`La suma es: ${x + y}`);
}

// Solicitar datos al usuario y convertirlos en n√∫meros
// Aqu√≠ JavaScript aplica hoisting y mueve la declaraci√≥n de `var x` y `var y` arriba
var x = parseFloat(prompt("INGRESA UN N√öMERO: "));
var y = parseFloat(prompt("INGRESA OTRO N√öMERO: "));

// Verificar si los valores ingresados son v√°lidos
if (isNaN(x) || isNaN(y)) {
    console.log("Por favor ingresa n√∫meros v√°lidos.");
    alert("Por favor ingresa n√∫meros v√°lidos.");
}else {
    getSum(x, y); // Llamada a la funci√≥n con los valores ingresados
};

// Diferencias clave:
// ‚úÖ La funci√≥n getSuma(x, y) ahora recibe par√°metros en lugar de pedir 
// los valores dentro de la funci√≥n.
// ‚úÖ Los prompt() se ejecutan antes de llamar a la funci√≥n, 
// y los valores ingresados se validan antes de usarlos.
// ‚úÖ Si los valores ingresados no son n√∫meros, 
// se muestra un mensaje de error y la funci√≥n no se ejecuta.